{"ast":null,"code":"var _jsxFileName = \"/Users/joseurbani/Documents/GitHub/Weather-App/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Cards from \"./components/Cards.jsx\";\nimport Nav from \"./components/Nav\";\nimport About from \"./components/About\";\nimport Ciudad from \"./components/Ciudad\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_API_KEY; //ocultamos la key de la appi\n\nfunction App() {\n  _s();\n\n  const [cities, setCities] = useState([]); //variable que va a contener la ciudad que se agrega o que se saca o lo que sea que hagamos con ella skere\n  //CREAMOS FUNCION DE AGREGAR CIUDAD\n\n  function handleAddCity(city) {\n    setCities(prevCities => {\n      return [city, ...prevCities];\n    });\n  } //CREAMOS FUNCION DE REMOVER CIUDAD\n\n\n  function handleRemoveCity(cityId) {\n    setCities(prevCities => {\n      return prevCities.filter(city => {\n        return cityId !== city.id;\n      });\n    });\n  } //CREAMOS FUNCION DE BUSCAR UNA CIDAD PARA LA SEARCHBAR\n\n\n  function onSearch(ciudad) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${API_KEY}&units=metric`) //sucersor de AJAX\n    //el fech nos trae la respuesta r del servidor API\n    .then(r => r.json()) //convierte la respuesta en json (ponele que llegue en xml)\n    .then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        handleAddCity(ciudad);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      exact: true,\n      render: () => /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onRemove: handleRemoveCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/ciudad/:id\",\n      component: Ciudad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/about\",\n      component: About\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/joseurbani/Documents/GitHub/Weather-App/src/App.js"],"names":["React","useState","Route","Cards","Nav","About","Ciudad","API_KEY","process","env","REACT_APP_API_KEY","App","cities","setCities","handleAddCity","city","prevCities","handleRemoveCity","cityId","filter","id","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","alert"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Cards from \"./components/Cards.jsx\";\nimport Nav from \"./components/Nav\";\nimport About from \"./components/About\";\nimport Ciudad from \"./components/Ciudad\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY; //ocultamos la key de la appi\n\nfunction App() {\n  const [cities, setCities] = useState([]); //variable que va a contener la ciudad que se agrega o que se saca o lo que sea que hagamos con ella skere\n\n  //CREAMOS FUNCION DE AGREGAR CIUDAD\n\n  function handleAddCity(city) {\n    setCities((prevCities) => {\n      return [city, ...prevCities];\n    });\n  }\n\n  //CREAMOS FUNCION DE REMOVER CIUDAD\n\n  function handleRemoveCity(cityId) {\n    setCities((prevCities) => {\n      return prevCities.filter((city) => {\n        return cityId !== city.id;\n      });\n    });\n  }\n\n  //CREAMOS FUNCION DE BUSCAR UNA CIDAD PARA LA SEARCHBAR\n\n  function onSearch(ciudad) {\n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${API_KEY}&units=metric`\n    ) //sucersor de AJAX\n      //el fech nos trae la respuesta r del servidor API\n\n      .then((r) => r.json()) //convierte la respuesta en json (ponele que llegue en xml)\n\n      .then((recurso) => {\n        if (recurso.main !== undefined) {\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon,\n          };\n          handleAddCity(ciudad);\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" render={() => <Nav onSearch={onSearch} />} />\n      <Route\n        path=\"/\"\n        exact\n        render={() => <Cards cities={cities} onRemove={handleRemoveCity} />}\n      />\n      {/* <Route\n        path=\"/ciudad/:id\"\n        exact\n        render={({ match }) => {\n          const city = cities.find(\n            (city) => city.id === parseInt(match.params.id)\n          );\n          return city ? <Ciudad city={city} /> : <h1> 404 | Errorazo </h1>;\n        }}\n      /> */}\n\n      <Route path=\"/ciudad/:id\" component={Ciudad} />\n      <Route path=\"/about\" component={About} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}