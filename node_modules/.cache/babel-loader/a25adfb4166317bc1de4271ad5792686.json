{"ast":null,"code":"var _jsxFileName = \"/Users/joseurbani/Documents/GitHub/Weather-App/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Card from './components/Card.jsx';\nimport Cards from './components/Cards.jsx';\nimport SearchBar from './components/SearchBar.jsx'; // import data, { Cairns } from './data.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nfunction App() {\n  _s();\n\n  const [cities, setCities] = useState([]); //variable que va a contener la ciudad que se agrega o que se saca o lo que sea que hagamos con ella skere\n  //CREAMOS FUNCION DE AGREGAR CIUDAD\n\n  function handleAddCity(city) {\n    setcities(prevCities => {\n      return [city, ...prevCities];\n    });\n  } //CREAMOS FUNCION DE REMOVER CIUDAD\n\n\n  function handleRemoveCity(cityId) {\n    setcities(prevCities => {\n      return prevCities.filter(city => {\n        return cityId != city.id;\n      });\n    });\n  } //CREAMOS FUNCION DE BUSCAR UNA CIDAD PARA LA SEARCHBAR\n\n\n  function onSearch(ciudad) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${API_KEY}&units=metric`) //sucersor de AJAX\n    //el fech nos trae la respuesta r del servidor API\n    .then(r => r.json()) //convierte la respuesta en json (ponele que llegue en xml)\n    .then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: ciudad => alert(ciudad)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Cards, {\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/joseurbani/Documents/GitHub/Weather-App/src/App.js"],"names":["React","useState","Card","Cards","SearchBar","API_KEY","process","env","REACT_APP_API_KEY","App","cities","setCities","handleAddCity","city","setcities","prevCities","handleRemoveCity","cityId","filter","id","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,SAAP,MAAsB,4BAAtB,C,CACA;;;AAGA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAE,EAAF,CAApC,CAFa,CAE8B;AAE3C;;AAEA,WAASW,aAAT,CAAwBC,IAAxB,EAA6B;AAC3BC,IAAAA,SAAS,CAAEC,UAAD,IAAe;AACvB,aAAO,CAACF,IAAD,EAAO,GAAGE,UAAV,CAAP;AACD,KAFQ,CAAT;AAGD,GAVY,CAYb;;;AAEA,WAASC,gBAAT,CAA2BC,MAA3B,EAAkC;AAChCH,IAAAA,SAAS,CAAEC,UAAD,IAAe;AACvB,aAAOA,UAAU,CAACG,MAAX,CAAmBL,IAAD,IAAQ;AAC/B,eAAOI,MAAM,IAAEJ,IAAI,CAACM,EAApB;AACD,OAFM,CAAP;AAGD,KAJQ,CAAT;AAKD,GApBY,CAsBb;;;AAEA,WAASC,QAAT,CAAkBC,MAAlB,EAA0B;AAExBC,IAAAA,KAAK,CAAE,oDAAmDD,MAAO,UAAShB,OAAQ,eAA7E,CAAL,CAAkG;AAElG;AAFA,KAIGkB,IAJH,CAIQC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAJb,EAIuB;AAJvB,KAMGF,IANH,CAMSG,OAAD,IAAa;AACjB,UAAGA,OAAO,CAACC,IAAR,KAAiBC,SAApB,EAA8B;AAC5B,cAAMP,MAAM,GAAG;AACbQ,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaK,QAAxB,CADQ;AAEbC,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaO,QAAxB,CAFQ;AAGbC,UAAAA,GAAG,EAAET,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBC,IAHX;AAIblB,UAAAA,EAAE,EAAEO,OAAO,CAACP,EAJC;AAKbmB,UAAAA,IAAI,EAAEZ,OAAO,CAACY,IAAR,CAAaC,KALN;AAMbC,UAAAA,IAAI,EAAEd,OAAO,CAACC,IAAR,CAAaa,IANN;AAObC,UAAAA,IAAI,EAAEf,OAAO,CAACe,IAPD;AAQbL,UAAAA,OAAO,EAAEV,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBT,IARf;AASbe,UAAAA,MAAM,EAAEhB,OAAO,CAACgB,MAAR,CAAeC,GATV;AAUbC,UAAAA,OAAO,EAAElB,OAAO,CAACmB,KAAR,CAAcC,GAVV;AAWbC,UAAAA,QAAQ,EAAErB,OAAO,CAACmB,KAAR,CAAcG;AAXX,SAAf;AAaArC,QAAAA,SAAS,CAACsC,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe5B,MAAf,CAAd,CAAT;AACD,OAfD,MAeO;AACL6B,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACD;AACF,KAzBH;AA2BC;;AAKH,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEI,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAK7B,MAAD,IAAY6B,KAAK,CAAC7B,MAAD;AAAxC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEX;AAAf;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAnEQD,G;;KAAAA,G;AAqET,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport Card from './components/Card.jsx';\nimport Cards from './components/Cards.jsx';\nimport SearchBar from './components/SearchBar.jsx';\n// import data, { Cairns } from './data.js';\n\n\nconst API_KEY = process.env.REACT_APP_API_KEY\n\nfunction App() {\n\n  const [cities, setCities] = useState ([]); //variable que va a contener la ciudad que se agrega o que se saca o lo que sea que hagamos con ella skere\n\n  //CREAMOS FUNCION DE AGREGAR CIUDAD\n\n  function handleAddCity (city){\n    setcities((prevCities) =>{\n      return [city, ...prevCities];\n    });\n  }\n\n  //CREAMOS FUNCION DE REMOVER CIUDAD\n\n  function handleRemoveCity (cityId){\n    setcities((prevCities) =>{\n      return prevCities.filter((city)=>{\n        return cityId!=city.id;\n      });\n    });\n  }\n  \n  //CREAMOS FUNCION DE BUSCAR UNA CIDAD PARA LA SEARCHBAR\n\n  function onSearch(ciudad) {\n\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${API_KEY}&units=metric`) //sucersor de AJAX\n\n    //el fech nos trae la respuesta r del servidor API\n\n      .then(r => r.json()) //convierte la respuesta en json (ponele que llegue en xml)\n\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n\n    }\n\n\n\n  \n  return (\n    <div className=\"App\">\n\n        <SearchBar onSearch = {(ciudad) => alert(ciudad)}  />\n\n        <Cards cities={cities} />\n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}